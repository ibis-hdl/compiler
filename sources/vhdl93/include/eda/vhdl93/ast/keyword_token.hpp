/*
 * keyword_token.hpp
 *
 *  Created on: 07.04.2017
 *      Author: olaf
 */

#ifndef SOURCES_VHDL93_INCLUDE_EDA_VHDL93_AST_KEYWORD_TOKEN_HPP_
#define SOURCES_VHDL93_INCLUDE_EDA_VHDL93_AST_KEYWORD_TOKEN_HPP_


#include <iosfwd>


namespace eda { namespace vhdl93 { namespace ast {


#if defined(NULL)
#undef NULL
#endif


enum class keyword_token
{
    UNSPECIFIED, // used as default constructible marker
    ABS, ACCESS, AFTER, ALIAS, ALL, AND, ARCHITECTURE, ARRAY,
    ASSERT, ATTRIBUTE, BEGIN, BLOCK, BODY, BUFFER, BUS, CASE,
    COMPONENT, CONFIGURATION, CONSTANT, DISCONNECT, DOWNTO,
    ELSE, ELSIF, END, ENTITY, EXIT, FILE, FOR, FUNCTION,
    GENERATE, GENERIC, GROUP, GUARDED, IF, IMPURE, IN, INERTIAL,
    INOUT, IS, LABEL, LIBRARY, LINKAGE, LITERAL, LOOP, MAP, MOD,
    NAND, NEW, NEXT, NOR, NOT, NULL, OF, ON, OPEN, OR, OTHERS,
    OUT, PACKAGE, PORT, POSTPONED, PROCEDURE, PROCESS, PURE,
    RANGE, RECORD, REGISTER, REJECT, REM, REPORT, RETURN, ROL,
    ROR, SELECT, SEVERITY, SIGNAL, SHARED, SLA, SLL, SRA, SRL,
    SUBTYPE, THEN, TO, TRANSPORT, TYPE, UNAFFECTED, UNITS,
    UNTIL, USE, VARIABLE, WAIT, WHEN, WHILE, WITH, XNOR, XOR
};


std::ostream& operator<<(std::ostream& os, keyword_token kw_token);


} } } // namespace eda.vhdl93.ast


#endif /* SOURCES_VHDL93_INCLUDE_EDA_VHDL93_AST_KEYWORD_TOKEN_HPP_ */
