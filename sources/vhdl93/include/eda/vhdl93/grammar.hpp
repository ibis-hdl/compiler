/*
 * grammar.hpp
 *
 *  Created on: 28.02.2017
 *      Author: olaf
 */

#ifndef INCLUDE_EDA_VHDL93_GRAMMAR_HPP_
#define INCLUDE_EDA_VHDL93_GRAMMAR_HPP_


#include <boost/spirit/home/x3.hpp>


namespace eda { namespace vhdl93 { namespace parser {

	namespace x3 = boost::spirit::x3;

	// Parser Rule IDs
	struct abstract_literal_class;
	struct access_type_definition_class;
	struct actual_designator_class;
	struct actual_parameter_part_class;
	struct actual_part_class;
	struct adding_operator_class;
	struct aggregate_class;
	struct alias_declaration_class;
	struct alias_designator_class;
	struct allocator_class;
	struct architecture_body_class;
	struct architecture_declarative_part_class;
	struct architecture_statement_part_class;
	struct array_type_definition_class;
	struct assertion_class;
	struct assertion_statement_class;
	struct association_element_class;
	struct association_list_class;
	struct attribute_declaration_class;
	struct attribute_designator_class;
	struct attribute_name_class;
	struct attribute_specification_class;
	struct base_class;
	struct base_specifier_class;
	struct base_unit_declaration_class;
	struct based_integer_class;
	struct based_literal_class;
	struct basic_character_class;
	struct basic_graphic_character_class;
	struct basic_identifier_class;
	struct binding_indication_class;
	struct bit_string_literal_class;
	struct bit_value_class;
	struct block_configuration_class;
	struct block_declarative_item_class;
	struct block_declarative_part_class;
	struct block_header_class;
	struct block_specification_class;
	struct block_statement_class;
	struct block_statement_part_class;
	struct case_statement_class;
	struct case_statement_alternative_class;
	struct character_literal_class;
	struct choice_class;
	struct choices_class;
	struct component_configuration_class;
	struct component_declaration_class;
	struct component_instantiation_statement_class;
	struct component_specification_class;
	struct composite_type_definition_class;
	struct concurrent_assertion_statement_class;
	struct concurrent_procedure_call_statement_class;
	struct concurrent_signal_assignment_statement_class;
	struct concurrent_statement_class;
	struct condition_class;
	struct condition_clause_class;
	struct conditional_signal_assignment_class;
	struct conditional_waveforms_class;
	struct configuration_declaration_class;
	struct configuration_declarative_item_class;
	struct configuration_declarative_part_class;
	struct configuration_item_class;
	struct configuration_specification_class;
	struct constant_declaration_class;
	struct constrained_array_definition_class;
	struct constraint_class;
	struct context_clause_class;
	struct context_item_class;
	struct decimal_literal_class;
	struct declaration_class;
	struct delay_mechanism_class;
	struct design_file_class;
	struct design_unit_class;
	struct designator_class;
	struct direction_class;
	struct disconnection_specification_class;
	struct discrete_range_class;
	struct element_association_class;
	struct element_declaration_class;
	struct element_subtype_definition_class;
	struct entity_aspect_class;
	struct entity_class_class;
	struct entity_class_entry_class;
	struct entity_class_entry_list_class;
	struct entity_declaration_class;
	struct entity_declarative_item_class;
	struct entity_declarative_part_class;
	struct entity_designator_class;
	struct entity_header_class;
	struct entity_name_list_class;
	struct entity_specification_class;
	struct entity_statement_class;
	struct entity_statement_part_class;
	struct entity_tag_class;
	struct enumeration_literal_class;
	struct enumeration_type_definition_class;
	struct exit_statement_class;
	struct exponent_class;
	struct expression_class;
	struct extended_digit_class;
	struct extended_identifier_class;
	struct factor_class;
	struct file_declaration_class;
	struct file_logical_name_class;
	struct file_open_information_class;
	struct file_type_definition_class;
	struct formal_designator_class;
	struct formal_parameter_list_class;
	struct formal_part_class;
	struct full_type_declaration_class;
	struct function_call_class;
	struct generate_statement_class;
	struct generation_scheme_class;
	struct generic_clause_class;
	struct generic_list_class;
	struct generic_map_aspect_class;
	struct graphic_character_class;
	struct group_constituent_class;
	struct group_constituent_list_class;
	struct group_template_declaration_class;
	struct group_declaration_class;
	struct guarded_signal_specification_class;
	struct identifier_class;
	struct identifier_list_class;
	struct if_statement_class;
	struct incomplete_type_declaration_class;
	struct index_constraint_class;
	struct index_specification_class;
	struct index_subtype_definition_class;
	struct indexed_name_class;
	struct instantiated_unit_class;
	struct instantiation_list_class;
	struct integer_class;
	struct integer_type_definition_class;
	struct interface_constant_declaration_class;
	struct interface_declaration_class;
	struct interface_element_class;
	struct interface_file_declaration_class;
	struct interface_list_class;
	struct interface_signal_declaration_class;
	struct interface_variable_declaration_class;
	struct iteration_scheme_class;
	struct label_class;
	struct letter_class;
	struct letter_or_digit_class;
	struct library_clause_class;
	struct library_unit_class;
	struct literal_class;
	struct logical_name_class;
	struct logical_name_list_class;
	struct logical_operator_class;
	struct loop_statement_class;
	struct miscellaneous_operator_class;
	struct mode_class;
	struct multiplying_operator_class;
	struct name_class;
	struct next_statement_class;
	struct null_statement_class;
	struct numeric_literal_class;
	struct object_declaration_class;
	struct operator_symbol_class;
	struct options_class;
	struct package_body_class;
	struct package_body_declarative_item_class;
	struct package_body_declarative_part_class;
	struct package_declaration_class;
	struct package_declarative_item_class;
	struct package_declarative_part_class;
	struct parameter_specification_class;
	struct physical_literal_class;
	struct physical_type_definition_class;
	struct port_clause_class;
	struct port_list_class;
	struct port_map_aspect_class;
	struct prefix_class;
	struct primary_class;
	struct primary_unit_class;
	struct procedure_call_class;
	struct procedure_call_statement_class;
	struct process_declarative_item_class;
	struct process_declarative_part_class;
	struct process_statement_class;
	struct process_statement_part_class;
	struct qualified_expression_class;
	struct range_class;
	struct range_constraint_class;
	struct record_type_definition_class;
	struct relation_class;
	struct relational_operator_class;
	struct report_statement_class;
	struct return_statement_class;
	struct scalar_type_definition_class;
	struct secondary_unit_class;
	struct secondary_unit_declaration_class;
	struct selected_name_class;
	struct selected_signal_assignment_class;
	struct selected_waveforms_class;
	struct sensitivity_clause_class;
	struct sensitivity_list_class;
	struct sequence_of_statements_class;
	struct sequential_statement_class;
	struct shift_expression_class;
	struct shift_operator_class;
	struct sign_class;
	struct signal_assignment_statement_class;
	struct signal_declaration_class;
	struct signal_kind_class;
	struct signal_list_class;
	struct signature_class;
	struct simple_expression_class;
	struct simple_name_class;
	struct slice_name_class;
	struct string_literal_class;
	struct subprogram_body_class;
	struct subprogram_declaration_class;
	struct subprogram_declarative_item_class;
	struct subprogram_declarative_part_class;
	struct subprogram_kind_class;
	struct subprogram_specification_class;
	struct subprogram_statement_part_class;
	struct subtype_declaration_class;
	struct subtype_indication_class;
	struct suffix_class;
	struct target_class;
	struct term_class;
	struct timeout_clause_class;
	struct type_conversion_class;
	struct type_declaration_class;
	struct type_definition_class;
	struct type_mark_class;
	struct unconstrained_array_definition_class;
	struct use_clause_class;
	struct variable_assignment_statement_class;
	struct variable_declaration_class;
	struct wait_statement_class;
	struct waveform_class;

	// Parser Rule Types
	typedef x3::rule<abstract_literal_class> abstract_literal_type;
	typedef x3::rule<access_type_definition_class> access_type_definition_type;
	typedef x3::rule<actual_designator_class> actual_designator_type;
	typedef x3::rule<actual_parameter_part_class> actual_parameter_part_type;
	typedef x3::rule<actual_part_class> actual_part_type;
	typedef x3::rule<adding_operator_class> adding_operator_type;
	typedef x3::rule<aggregate_class> aggregate_type;
	typedef x3::rule<alias_declaration_class> alias_declaration_type;
	typedef x3::rule<alias_designator_class> alias_designator_type;
	typedef x3::rule<allocator_class> allocator_type;
	typedef x3::rule<architecture_body_class> architecture_body_type;
	typedef x3::rule<architecture_declarative_part_class> architecture_declarative_part_type;
	typedef x3::rule<architecture_statement_part_class> architecture_statement_part_type;
	typedef x3::rule<array_type_definition_class> array_type_definition_type;
	typedef x3::rule<assertion_class> assertion_type;
	typedef x3::rule<assertion_statement_class> assertion_statement_type;
	typedef x3::rule<association_element_class> association_element_type;
	typedef x3::rule<association_list_class> association_list_type;
	typedef x3::rule<attribute_declaration_class> attribute_declaration_type;
	typedef x3::rule<attribute_designator_class> attribute_designator_type;
	typedef x3::rule<attribute_name_class> attribute_name_type;
	typedef x3::rule<attribute_specification_class> attribute_specification_type;
	typedef x3::rule<base_class> base_type;
	typedef x3::rule<base_specifier_class> base_specifier_type;
	typedef x3::rule<base_unit_declaration_class> base_unit_declaration_type;
	typedef x3::rule<based_integer_class> based_integer_type;
	typedef x3::rule<based_literal_class> based_literal_type;
	typedef x3::rule<basic_character_class> basic_character_type;
	typedef x3::rule<basic_graphic_character_class> basic_graphic_character_type;
	typedef x3::rule<basic_identifier_class> basic_identifier_type;
	typedef x3::rule<binding_indication_class> binding_indication_type;
	typedef x3::rule<bit_string_literal_class> bit_string_literal_type;
	typedef x3::rule<bit_value_class> bit_value_type;
	typedef x3::rule<block_configuration_class> block_configuration_type;
	typedef x3::rule<block_declarative_item_class> block_declarative_item_type;
	typedef x3::rule<block_declarative_part_class> block_declarative_part_type;
	typedef x3::rule<block_header_class> block_header_type;
	typedef x3::rule<block_specification_class> block_specification_type;
	typedef x3::rule<block_statement_class> block_statement_type;
	typedef x3::rule<block_statement_part_class> block_statement_part_type;
	typedef x3::rule<case_statement_class> case_statement_type;
	typedef x3::rule<case_statement_alternative_class> case_statement_alternative_type;
	typedef x3::rule<character_literal_class> character_literal_type;
	typedef x3::rule<choice_class> choice_type;
	typedef x3::rule<choices_class> choices_type;
	typedef x3::rule<component_configuration_class> component_configuration_type;
	typedef x3::rule<component_declaration_class> component_declaration_type;
	typedef x3::rule<component_instantiation_statement_class> component_instantiation_statement_type;
	typedef x3::rule<component_specification_class> component_specification_type;
	typedef x3::rule<composite_type_definition_class> composite_type_definition_type;
	typedef x3::rule<concurrent_assertion_statement_class> concurrent_assertion_statement_type;
	typedef x3::rule<concurrent_procedure_call_statement_class> concurrent_procedure_call_statement_type;
	typedef x3::rule<concurrent_signal_assignment_statement_class> concurrent_signal_assignment_statement_type;
	typedef x3::rule<concurrent_statement_class> concurrent_statement_type;
	typedef x3::rule<condition_class> condition_type;
	typedef x3::rule<condition_clause_class> condition_clause_type;
	typedef x3::rule<conditional_signal_assignment_class> conditional_signal_assignment_type;
	typedef x3::rule<conditional_waveforms_class> conditional_waveforms_type;
	typedef x3::rule<configuration_declaration_class> configuration_declaration_type;
	typedef x3::rule<configuration_declarative_item_class> configuration_declarative_item_type;
	typedef x3::rule<configuration_declarative_part_class> configuration_declarative_part_type;
	typedef x3::rule<configuration_item_class> configuration_item_type;
	typedef x3::rule<configuration_specification_class> configuration_specification_type;
	typedef x3::rule<constant_declaration_class> constant_declaration_type;
	typedef x3::rule<constrained_array_definition_class> constrained_array_definition_type;
	typedef x3::rule<constraint_class> constraint_type;
	typedef x3::rule<context_clause_class> context_clause_type;
	typedef x3::rule<context_item_class> context_item_type;
	typedef x3::rule<decimal_literal_class> decimal_literal_type;
	typedef x3::rule<declaration_class> declaration_type;
	typedef x3::rule<delay_mechanism_class> delay_mechanism_type;
	typedef x3::rule<design_file_class> design_file_type;
	typedef x3::rule<design_unit_class> design_unit_type;
	typedef x3::rule<designator_class> designator_type;
	typedef x3::rule<direction_class> direction_type;
	typedef x3::rule<disconnection_specification_class> disconnection_specification_type;
	typedef x3::rule<discrete_range_class> discrete_range_type;
	typedef x3::rule<element_association_class> element_association_type;
	typedef x3::rule<element_declaration_class> element_declaration_type;
	typedef x3::rule<element_subtype_definition_class> element_subtype_definition_type;
	typedef x3::rule<entity_aspect_class> entity_aspect_type;
	typedef x3::rule<entity_class_class> entity_class_type;
	typedef x3::rule<entity_class_entry_class> entity_class_entry_type;
	typedef x3::rule<entity_class_entry_list_class> entity_class_entry_list_type;
	typedef x3::rule<entity_declaration_class> entity_declaration_type;
	typedef x3::rule<entity_declarative_item_class> entity_declarative_item_type;
	typedef x3::rule<entity_declarative_part_class> entity_declarative_part_type;
	typedef x3::rule<entity_designator_class> entity_designator_type;
	typedef x3::rule<entity_header_class> entity_header_type;
	typedef x3::rule<entity_name_list_class> entity_name_list_type;
	typedef x3::rule<entity_specification_class> entity_specification_type;
	typedef x3::rule<entity_statement_class> entity_statement_type;
	typedef x3::rule<entity_statement_part_class> entity_statement_part_type;
	typedef x3::rule<entity_tag_class> entity_tag_type;
	typedef x3::rule<enumeration_literal_class> enumeration_literal_type;
	typedef x3::rule<enumeration_type_definition_class> enumeration_type_definition_type;
	typedef x3::rule<exit_statement_class> exit_statement_type;
	typedef x3::rule<exponent_class> exponent_type;
	typedef x3::rule<expression_class> expression_type;
	typedef x3::rule<extended_digit_class> extended_digit_type;
	typedef x3::rule<extended_identifier_class> extended_identifier_type;
	typedef x3::rule<factor_class> factor_type;
	typedef x3::rule<file_declaration_class> file_declaration_type;
	typedef x3::rule<file_logical_name_class> file_logical_name_type;
	typedef x3::rule<file_open_information_class> file_open_information_type;
	typedef x3::rule<file_type_definition_class> file_type_definition_type;
	typedef x3::rule<formal_designator_class> formal_designator_type;
	typedef x3::rule<formal_parameter_list_class> formal_parameter_list_type;
	typedef x3::rule<formal_part_class> formal_part_type;
	typedef x3::rule<full_type_declaration_class> full_type_declaration_type;
	typedef x3::rule<function_call_class> function_call_type;
	typedef x3::rule<generate_statement_class> generate_statement_type;
	typedef x3::rule<generation_scheme_class> generation_scheme_type;
	typedef x3::rule<generic_clause_class> generic_clause_type;
	typedef x3::rule<generic_list_class> generic_list_type;
	typedef x3::rule<generic_map_aspect_class> generic_map_aspect_type;
	typedef x3::rule<graphic_character_class> graphic_character_type;
	typedef x3::rule<group_constituent_class> group_constituent_type;
	typedef x3::rule<group_constituent_list_class> group_constituent_list_type;
	typedef x3::rule<group_template_declaration_class> group_template_declaration_type;
	typedef x3::rule<group_declaration_class> group_declaration_type;
	typedef x3::rule<guarded_signal_specification_class> guarded_signal_specification_type;
	typedef x3::rule<identifier_class> identifier_type;
	typedef x3::rule<identifier_list_class> identifier_list_type;
	typedef x3::rule<if_statement_class> if_statement_type;
	typedef x3::rule<incomplete_type_declaration_class> incomplete_type_declaration_type;
	typedef x3::rule<index_constraint_class> index_constraint_type;
	typedef x3::rule<index_specification_class> index_specification_type;
	typedef x3::rule<index_subtype_definition_class> index_subtype_definition_type;
	typedef x3::rule<indexed_name_class> indexed_name_type;
	typedef x3::rule<instantiated_unit_class> instantiated_unit_type;
	typedef x3::rule<instantiation_list_class> instantiation_list_type;
	typedef x3::rule<integer_class> integer_type;
	typedef x3::rule<integer_type_definition_class> integer_type_definition_type;
	typedef x3::rule<interface_constant_declaration_class> interface_constant_declaration_type;
	typedef x3::rule<interface_declaration_class> interface_declaration_type;
	typedef x3::rule<interface_element_class> interface_element_type;
	typedef x3::rule<interface_file_declaration_class> interface_file_declaration_type;
	typedef x3::rule<interface_list_class> interface_list_type;
	typedef x3::rule<interface_signal_declaration_class> interface_signal_declaration_type;
	typedef x3::rule<interface_variable_declaration_class> interface_variable_declaration_type;
	typedef x3::rule<iteration_scheme_class> iteration_scheme_type;
	typedef x3::rule<label_class> label_type;
	typedef x3::rule<letter_class> letter_type;
	typedef x3::rule<letter_or_digit_class> letter_or_digit_type;
	typedef x3::rule<library_clause_class> library_clause_type;
	typedef x3::rule<library_unit_class> library_unit_type;
	typedef x3::rule<literal_class> literal_type;
	typedef x3::rule<logical_name_class> logical_name_type;
	typedef x3::rule<logical_name_list_class> logical_name_list_type;
	typedef x3::rule<logical_operator_class> logical_operator_type;
	typedef x3::rule<loop_statement_class> loop_statement_type;
	typedef x3::rule<miscellaneous_operator_class> miscellaneous_operator_type;
	typedef x3::rule<mode_class> mode_type;
	typedef x3::rule<multiplying_operator_class> multiplying_operator_type;
	typedef x3::rule<name_class> name_type;
	typedef x3::rule<next_statement_class> next_statement_type;
	typedef x3::rule<null_statement_class> null_statement_type;
	typedef x3::rule<numeric_literal_class> numeric_literal_type;
	typedef x3::rule<object_declaration_class> object_declaration_type;
	typedef x3::rule<operator_symbol_class> operator_symbol_type;
	typedef x3::rule<options_class> options_type;
	typedef x3::rule<package_body_class> package_body_type;
	typedef x3::rule<package_body_declarative_item_class> package_body_declarative_item_type;
	typedef x3::rule<package_body_declarative_part_class> package_body_declarative_part_type;
	typedef x3::rule<package_declaration_class> package_declaration_type;
	typedef x3::rule<package_declarative_item_class> package_declarative_item_type;
	typedef x3::rule<package_declarative_part_class> package_declarative_part_type;
	typedef x3::rule<parameter_specification_class> parameter_specification_type;
	typedef x3::rule<physical_literal_class> physical_literal_type;
	typedef x3::rule<physical_type_definition_class> physical_type_definition_type;
	typedef x3::rule<port_clause_class> port_clause_type;
	typedef x3::rule<port_list_class> port_list_type;
	typedef x3::rule<port_map_aspect_class> port_map_aspect_type;
	typedef x3::rule<prefix_class> prefix_type;
	typedef x3::rule<primary_class> primary_type;
	typedef x3::rule<primary_unit_class> primary_unit_type;
	typedef x3::rule<procedure_call_class> procedure_call_type;
	typedef x3::rule<procedure_call_statement_class> procedure_call_statement_type;
	typedef x3::rule<process_declarative_item_class> process_declarative_item_type;
	typedef x3::rule<process_declarative_part_class> process_declarative_part_type;
	typedef x3::rule<process_statement_class> process_statement_type;
	typedef x3::rule<process_statement_part_class> process_statement_part_type;
	typedef x3::rule<qualified_expression_class> qualified_expression_type;
	typedef x3::rule<range_class> range_type;
	typedef x3::rule<range_constraint_class> range_constraint_type;
	typedef x3::rule<record_type_definition_class> record_type_definition_type;
	typedef x3::rule<relation_class> relation_type;
	typedef x3::rule<relational_operator_class> relational_operator_type;
	typedef x3::rule<report_statement_class> report_statement_type;
	typedef x3::rule<return_statement_class> return_statement_type;
	typedef x3::rule<scalar_type_definition_class> scalar_type_definition_type;
	typedef x3::rule<secondary_unit_class> secondary_unit_type;
	typedef x3::rule<secondary_unit_declaration_class> secondary_unit_declaration_type;
	typedef x3::rule<selected_name_class> selected_name_type;
	typedef x3::rule<selected_signal_assignment_class> selected_signal_assignment_type;
	typedef x3::rule<selected_waveforms_class> selected_waveforms_type;
	typedef x3::rule<sensitivity_clause_class> sensitivity_clause_type;
	typedef x3::rule<sensitivity_list_class> sensitivity_list_type;
	typedef x3::rule<sequence_of_statements_class> sequence_of_statements_type;
	typedef x3::rule<sequential_statement_class> sequential_statement_type;
	typedef x3::rule<shift_expression_class> shift_expression_type;
	typedef x3::rule<shift_operator_class> shift_operator_type;
	typedef x3::rule<sign_class> sign_type;
	typedef x3::rule<signal_assignment_statement_class> signal_assignment_statement_type;
	typedef x3::rule<signal_declaration_class> signal_declaration_type;
	typedef x3::rule<signal_kind_class> signal_kind_type;
	typedef x3::rule<signal_list_class> signal_list_type;
	typedef x3::rule<signature_class> signature_type;
	typedef x3::rule<simple_expression_class> simple_expression_type;
	typedef x3::rule<simple_name_class> simple_name_type;
	typedef x3::rule<slice_name_class> slice_name_type;
	typedef x3::rule<string_literal_class> string_literal_type;
	typedef x3::rule<subprogram_body_class> subprogram_body_type;
	typedef x3::rule<subprogram_declaration_class> subprogram_declaration_type;
	typedef x3::rule<subprogram_declarative_item_class> subprogram_declarative_item_type;
	typedef x3::rule<subprogram_declarative_part_class> subprogram_declarative_part_type;
	typedef x3::rule<subprogram_kind_class> subprogram_kind_type;
	typedef x3::rule<subprogram_specification_class> subprogram_specification_type;
	typedef x3::rule<subprogram_statement_part_class> subprogram_statement_part_type;
	typedef x3::rule<subtype_declaration_class> subtype_declaration_type;
	typedef x3::rule<subtype_indication_class> subtype_indication_type;
	typedef x3::rule<suffix_class> suffix_type;
	typedef x3::rule<target_class> target_type;
	typedef x3::rule<term_class> term_type;
	typedef x3::rule<timeout_clause_class> timeout_clause_type;
	typedef x3::rule<type_conversion_class> type_conversion_type;
	typedef x3::rule<type_declaration_class> type_declaration_type;
	typedef x3::rule<type_definition_class> type_definition_type;
	typedef x3::rule<type_mark_class> type_mark_type;
	typedef x3::rule<unconstrained_array_definition_class> unconstrained_array_definition_type;
	typedef x3::rule<use_clause_class> use_clause_type;
	typedef x3::rule<variable_assignment_statement_class> variable_assignment_statement_type;
	typedef x3::rule<variable_declaration_class> variable_declaration_type;
	typedef x3::rule<wait_statement_class> wait_statement_type;
	typedef x3::rule<waveform_class> waveform_type;

} } } // namespace eda.vhdl93.parser


#endif /* INCLUDE_EDA_VHDL93_GRAMMAR_HPP_ */
