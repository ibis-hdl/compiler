{
    "version": 8,
    "include": [
        "os.json"
    ],
    "configurePresets": [
        {
            "name": "cpp-standard",
            "description": "Set Compiler's C++ Standard",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_EXTENSIONS": "OFF",
                "CMAKE_CXX_STANDARD": "23",
                "CMAKE_CXX_STANDARD_REQUIRED": "ON"
            }
        },
        {
            "name": "cmake-default-policies",
            "description": "Set CMake policies (regards FindBoost module, MSVC runtime)",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_POLICY_DEFAULT_CMP0167": "NEW",
                "CMAKE_POLICY_DEFAULT_CMP0091": "NEW"
            }
        },
        {
            "name": "cmake-default-configure-settings",
            "description": "Enable, Disable some CMake warnings, e.g. '--no-warn-unused-cli'",
            "hidden": true,
            "warnings": {
                "unusedCli": false
            },
            "inherits": [ "cmake-default-policies" ],
            "cacheVariables": {
                "CMAKE_VERBOSE_MAKEFILE": "OFF"
            }
        },
        {
            "name": "cmake-pedantic-configure-settings",
            "description": "Enable CMake pedantic warnings",
            "hidden": true,
            "warnings": {
                "dev": true,
                "deprecated": true,
                "uninitialized": false,
                "unusedCli": true,
                "systemVars": true
            },
            "errors": {
              "dev": false,
              "deprecated": true
            },
            "inherits": [ "cmake-default-policies" ],
            "cacheVariables": {
                "CMAKE_VERBOSE_MAKEFILE": "ON"
            }
        },
        {
            "name": "ninja-default-settings",
            "description": "Common settings related to build tool Ninja.",
            "hidden": true,
            "binaryDir": "${sourceDir}/build/",
            "cacheVariables": {
                "CMAKE_MAKE_PROGRAM": "ninja",
                "CMAKE_EXPORT_COMPILE_COMMANDS": true
            },
            "environment": {
                "NINJA_STATUS": "[%f/%t (Î£ %es)] "
            }
        },
        {
            "name": "ninja-single-config",
            "description": "Traditional single-config Ninja generator.",
            "hidden": true,
            "generator": "Ninja",
            "inherits": [ "ninja-default-settings" ]
        },
        {
            "name": "ninja-multi-config",
            "description": "Multiple configurations Generator.",
            "hidden": true,
            "generator": "Ninja Multi-Config",
            "inherits": [ "ninja-default-settings" ],
            "cacheVariables": {
                "CMAKE_CONFIGURATION_TYPES": "Debug;Release",
                "CMAKE_DEFAULT_BUILD_TYPE": "Release"
            }
        },
        {
            "name": "settings-stdlib-libc++",
            "description": "Settings to compile and link with libc++",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_FLAGS": "-stdlib=libc++",
                "CMAKE_EXE_LINKER_FLAGS": "-stdlib=libc++",
                "CMAKE_SHARED_LINKER_FLAGS": "-stdlib=libc++"
            }
        },
        {
            "name": "default-install-settings",
            "description": "Default build and install directories",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_INSTALL_PREFIX": "${sourceDir}/build/${presetName}/install"
            }
        },
        {
            "name": "default-environment",
            "description": "Default environment variables for the CMake process",
            "hidden": true,
            "environment": {}
        },
        {
            "name": "ccache",
            "description": "ccache - compiler cache",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_COMPILER_LAUNCHER": "ccache",
                "CCACHE_BASEDIR": "${sourceDir}",
                "CCACHE_SLOPPINESS": "pch_defines,time_macros",
                "CCACHE_DIR": "~/.cache/ccache" 
            }
        },
        {
            "name": "sccache",
            "description": "sccache - Mozilla's ccache-like tool",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_COMPILER_LAUNCHER": "sccache",
                "CMAKE_MSVC_DEBUG_INFORMATION_FORMAT": "Embedded",
                "CMAKE_POLICY_DEFAULT_CMP0141": "NEW"                
            }
        },
        {
            "name": "tool-clang-tidy",
            "description": "CMake Clang-Tidy build target",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_CLANG_TIDY": "clang-tidy;--format-style=file;-p=${sourceDir}/build"
            }
        },
        {
            "name": "tool-cppcheck",
            "description": "CMake CppCheck tool",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_CLANG_CPPCHECK": "cppcheck;--inline-suppr"
            }
        },
        {
            "name": "tool-iwyu",
            "description": "CMake Clang based Include-What-You-Use (IWYU)",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_INCLUDE_WHAT_YOU_USE": "iwyu;-Xiwyu;--mapping_file=${sourceDir}/cmake/utils/iwyu/project.imp;-Xiwyu;--no_comments;-Xiwyu;--max_line_length=160;-Xiwyu;--transitive_includes_only;-Xiwyu;--quoted_includes_first;-Xiwyu;--cxx23ns"
            }
        },
        {
            "name": "tool-iwyu-windows",
            "description": "CMake Clang based Include-What-You-Use",
            "hidden": true,
            "inherits": [ "condition-windows" ],
            "cacheVariables": {
                "CXX_INCLUDE_WHAT_YOU_USE": "iwyu;--driver-mode=cl"
            }
        },
        {
            "name": "tool-coverage-linux",
            "description": "Code coverage using Clang/Gcc on Linux/macOS",
            "hidden": true,
            "binaryDir": "${sourceDir}/build/coverage",
            "inherits": [ "condition-linux-or-macos" ],
            "cacheVariables": {
                "ENABLE_COVERAGE": "ON",
                "CMAKE_BUILD_TYPE": "Coverage",
                "CMAKE_CXX_FLAGS_COVERAGE": "-Og -g --coverage -fkeep-inline-functions -fkeep-static-functions",
                "CMAKE_EXE_LINKER_FLAGS_COVERAGE": "--coverage",
                "CMAKE_SHARED_LINKER_FLAGS_COVERAGE": "--coverage",
                "CMAKE_MAP_IMPORTED_CONFIG_COVERAGE": "Coverage;Release;Debug;",
                "COVERAGE_HTML_COMMAND": ""
            }
        },
        {
            "name": "tool-sanitize-asan-ubsan",
            "description": "Sanitize Address and UndefinedBehavior using Clang/Gcc on Linux/macOS",
            "hidden": true,
            "binaryDir": "${sourceDir}/build/sanitize",
            "inherits": [ "condition-linux-or-macos" ],
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Sanitize",
                "CMAKE_CXX_FLAGS_SANITIZE": "-U_FORTIFY_SOURCE -O2 -g -fsanitize=address,undefined -fno-omit-frame-pointer -fno-common",
                "CMAKE_MAP_IMPORTED_CONFIG_SANITIZE": "Sanitize;Release;Debug;"
            }
        },
        {
            "name": "libstdcxx-debug",
            "description": "GNU libstdc++ Debug Mode for GCC and Clang, also Glibc",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_FLAGS_INIT": "-D_GLIBCXX_ASSERTIONS=1 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3"
            }
        }      
    ],
    "buildPresets": [],
    "testPresets": [
        {
            "name": "default-testPreset",
            "hidden": true,
            "output": {
                "outputOnFailure": true,
                "verbosity": "verbose"
            },
            "execution": {
                "noTestsAction": "error",
                "stopOnFailure": false,
                "timeout": 60
            },
            "environment": {
                "BOOST_TEST_LOG_LEVEL": "error"
              }
        }
    ]
}