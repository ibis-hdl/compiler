{
    "version": 8,
    "include": [
        "compiler.json"
    ],
    "configurePresets": [
        {
            "name": "tool-clang-tidy",
            "description": "CMake Clang-Tidy build target",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_CLANG_TIDY": "clang-tidy;--format-style=file;-p=${sourceDir}/build"
            }
        },
        {
            "name": "tool-cppcheck",
            "description": "CMake CppCheck tool",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_CLANG_CPPCHECK": "cppcheck;--inline-suppr"
            }
        },
        {
            "name": "tool-iwyu",
            "description": "CMake Clang based Include-What-You-Use (IWYU)",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_INCLUDE_WHAT_YOU_USE": "iwyu;-Xiwyu;--mapping_file=${sourceDir}/cmake/utils/iwyu/project.imp;-Xiwyu;--no_comments;-Xiwyu;--max_line_length=160;-Xiwyu;--transitive_includes_only;-Xiwyu;--quoted_includes_first;-Xiwyu;--cxx23ns"
            }
        },
        {
            "name": "tool-iwyu-windows",
            "description": "CMake Clang based Include-What-You-Use",
            "hidden": true,
            "inherits": [ "condition-windows" ],
            "cacheVariables": {
                "CXX_INCLUDE_WHAT_YOU_USE": "iwyu;--driver-mode=cl"
            }
        },
        {
            "name": "tool-coverage-linux",
            "description": "Code coverage using Gcc/Clang on Linux/macOS",
            "hidden": true,
            "inherits": [ "condition-linux-or-macos" ],
            "cacheVariables": {
                "ENABLE_COVERAGE": "ON",
                "CMAKE_BUILD_TYPE": "Coverage",
                "CMAKE_CXX_FLAGS_COVERAGE": "-Og -g --coverage -fkeep-inline-functions -fkeep-static-functions -fprofile-abs-path",
                "CMAKE_EXE_LINKER_FLAGS_COVERAGE": "--coverage",
                "CMAKE_SHARED_LINKER_FLAGS_COVERAGE": "--coverage",
                "CMAKE_MAP_IMPORTED_CONFIG_COVERAGE": "Coverage;Release;Debug;",
                "COVERAGE_HTML_COMMAND": ""
            }
        },
        {
            "name": "tool-sanitize-asan-ubsan",
            "description": "Sanitize Address and UndefinedBehavior using Clang/Gcc on Linux/macOS",
            "hidden": true,
            "inherits": [ "condition-linux-or-macos" ],
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Sanitize",
                "CMAKE_CXX_FLAGS_SANITIZE": "-O2 -g -fsanitize=address,undefined -fno-omit-frame-pointer -fno-common -U_GLIBCXX_DEBUG -U_GLIBCXX_DEBUG_PEDANTIC -U_GLIBCXX_SANITIZE_VECTOR -U_FORTIFY_SOURCE",
                "CMAKE_MAP_IMPORTED_CONFIG_SANITIZE": "Sanitize;Release;Debug;"
            }
        },
        {
            "name": "libstdcxx-debug",
            "description": "GNU libstdc++ Debug Mode for GCC and Clang, also Glibc",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_FLAGS_INIT": "-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_GLIBCXX_SANITIZE_VECTOR -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3"
            },
            "environment":{
                "GLIBCXX_DEBUG_MESSAGE_LENGTH": "100"
            }
        },   
        {
            "name": "libcxx-debug",
            "description": "LLVM lib++ Debug Mode for Clang",
            "hidden": true,
            "cacheVariables": {
                "CMAKE_CXX_FLAGS_INIT": "-D_LIBCPP_DEBUG=1"
            }
        },
        {
            "name": "developer-mode",
            "hidden": true,
            "cacheVariables": {
              "IBIS_DEVELOPER_MODE": "ON",
              "CMAKE_BUILD_TYPE": "Debug"
            }
        },  
        {
            "name": "dev-clang-tidy",
            "displayName": "Clang-Tidy",
            "description": "Clang-based C++ “linter” tool",
            "hidden": true,
            "inherits": [
                "dev-compiler-clang",
                "tool-clang-tidy"
            ]
        },
        {
            "name": "dev-clang-cppcheck",
            "displayName": "Clang-cppcheck",
            "description": "Cppcheck tool for static C/C++ code analysis",
            "hidden": true,
            "inherits": [
                "dev-compiler-clang",
                "tool-cppcheck"
            ]
        },        
        {
            "name": "dev-clang-iwyu",
            "displayName": "Clang-IWYU",
            "description": "Clang based Include-What-You-Use tool",
            "hidden": true,
            "inherits": [
                "dev-compiler-clang",
                "tool-iwyu"
            ]
        },
        {
            "name": "dev-clang-sanitize",
            "displayName": "Clang-Sanitize",
            "description": "Developer-Mode with Clang using sanitize settings",
            "hidden": true,
            "inherits": [
                "dev-compiler-clang",
                "tool-sanitize-asan-ubsan"
            ]
        },
        {
            "name": "dev-clang-coverage",
            "displayName": "Clang-Coverage",
            "description": "Developer-Mode with Clang using coverage settings",
            "hidden": true,
            "inherits": [
                "dev-compiler-clang",
                "tool-coverage-linux"
            ]
        }
    ],
    "buildPresets": [
        {
            "name": "dev-clang-tidy-release",
            "displayName": "Release",
            "description": "Release build with Clang Tidy",
            "configuration": "Release",
            "configurePreset": "dev-clang-tidy"
        },        
        {
            "name": "dev-clang-cppcheck-release",
            "displayName": "Release",
            "description": "Release build with Clang Tidy",
            "configuration": "Release",
            "configurePreset": "dev-clang-tidy"
        },
        {
            "name": "dev-clang-iwyu-release",
            "displayName": "Release",
            "description": "Release build with Clang Include-What-You-Use",
            "configuration": "Release",
            "configurePreset": "dev-clang-iwyu"
        },
        {
            "name": "dev-clang-dev-sanitize-debug",
            "displayName": "Debug",
            "description": "Debug build with Clang sanitizer settings",
            "configuration": "Release",
            "configurePreset": "dev-clang-sanitize"
        }
    ],
    "testPresets": [
        {
            "name": "dev-clang-tidy-release-test",
            "displayName": "Release Test",
            "description": "Test Clang Tidy build",
            "configuration": "Release",
            "configurePreset": "dev-clang-tidy",
            "inherits": [
                "default-testPreset"
            ]
        },
        {
            "name": "dev-clang-cppcheck-release-test",
            "displayName": "Release Test",
            "description": "Test Clang Cppcheck build",
            "configuration": "Release",
            "configurePreset": "dev-clang-cppcheck",
            "inherits": [
                "default-testPreset"
            ]
        },               
        {
            "name": "dev-clang-iwyu-release-test",
            "displayName": "Release Test",
            "description": "Test Clang IWYU build",
            "configuration": "Release",
            "configurePreset": "dev-clang-iwyu",
            "inherits": [
                "default-testPreset"
            ]
        },
        {
            "name": "dev-clang-sanitize-debug-test",
            "displayName": "Debug Test",
            "description": "Test Clang sanitize build",
            "configuration": "Debug",
            "configurePreset": "dev-clang-sanitize",
            "inherits": [
                "default-testPreset"
            ]
        }
    ],
    "workflowPresets": [

    ]    
}